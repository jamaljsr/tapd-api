syntax = "proto3";

package rfqrpc;

option go_package = "github.com/lightninglabs/taproot-assets/taprpc/rfqrpc";

service Rfq {
    /* tapcli: `rfq buyorder`
    AddAssetBuyOrder is used to add a buy order for a specific asset. If a buy
    order already exists for the asset, it will be updated.
    */
    rpc AddAssetBuyOrder (AddAssetBuyOrderRequest)
        returns (AddAssetBuyOrderResponse);

    /* tapcli: `rfq sellorder`
    AddAssetSellOrder is used to add a sell order for a specific asset. If a
    sell order already exists for the asset, it will be updated.
    */
    rpc AddAssetSellOrder (AddAssetSellOrderRequest)
        returns (AddAssetSellOrderResponse);

    /* tapcli: `rfq selloffer`
    AddAssetSellOffer is used to add a sell offer for a specific asset. If a
    sell offer already exists for the asset, it will be updated.
    */
    rpc AddAssetSellOffer (AddAssetSellOfferRequest)
        returns (AddAssetSellOfferResponse);

    /* tapcli: `rfq buyoffer`
    AddAssetBuyOffer is used to add a buy offer for a specific asset. If a
    buy offer already exists for the asset, it will be updated.

    A buy offer is used by the node to selectively accept or reject incoming
    asset sell quote requests before price is considered.
    */
    rpc AddAssetBuyOffer (AddAssetBuyOfferRequest)
        returns (AddAssetBuyOfferResponse);

    /* tapcli: `rfq acceptedquotes`
    QueryPeerAcceptedQuotes is used to query for quotes that were requested by
    our node and have been accepted our peers.
    */
    rpc QueryPeerAcceptedQuotes (QueryPeerAcceptedQuotesRequest)
        returns (QueryPeerAcceptedQuotesResponse);

    /*
    SubscribeRfqEventNtfns is used to subscribe to RFQ events.
    */
    rpc SubscribeRfqEventNtfns (SubscribeRfqEventNtfnsRequest)
        returns (stream RfqEvent);
}

message AssetSpecifier {
    oneof id {
        // The 32-byte asset ID specified as raw bytes (gRPC only).
        bytes asset_id = 1;

        // The 32-byte asset ID encoded as a hex string (use this for REST).
        string asset_id_str = 2;

        // The 32-byte asset group key specified as raw bytes (gRPC only).
        bytes group_key = 3;

        // The 32-byte asset group key encoded as hex string (use this for
        // REST).
        string group_key_str = 4;
    }
}

message AddAssetBuyOrderRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // The minimum amount of the asset to buy.
    uint64 min_asset_amount = 2;

    // The maximum amount BTC to spend (units: millisats).
    uint64 max_bid = 3;

    // The unix timestamp in seconds after which the order is no longer valid.
    uint64 expiry = 4;

    // peer_pub_key is an optional field for specifying the public key of the
    // intended recipient peer for the order.
    bytes peer_pub_key = 5;

    // timeout_seconds is the number of seconds to wait for the peer to respond
    // with an accepted quote (or a rejection).
    uint32 timeout_seconds = 6;
}

message AddAssetBuyOrderResponse {
    PeerAcceptedBuyQuote accepted_quote = 1;
}

message AddAssetSellOrderRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // The maximum amount of the asset to sell.
    uint64 max_asset_amount = 2;

    // The minimum amount of BTC to accept (units: millisats).
    uint64 min_ask = 3;

    // The unix timestamp in seconds after which the order is no longer valid.
    uint64 expiry = 4;

    // peer_pub_key is an optional field for specifying the public key of the
    // intended recipient peer for the order.
    bytes peer_pub_key = 5;

    // timeout_seconds is the number of seconds to wait for the peer to respond
    // with an accepted quote (or a rejection).
    uint32 timeout_seconds = 6;
}

message AddAssetSellOrderResponse {
    PeerAcceptedSellQuote accepted_quote = 1;
}

message AddAssetSellOfferRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // max_units is the maximum amount of the asset to sell.
    uint64 max_units = 2;
}

message AddAssetSellOfferResponse {
}

message AddAssetBuyOfferRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // max_units is the maximum amount of the asset to buy.
    uint64 max_units = 2;
}

message AddAssetBuyOfferResponse {
}

message QueryPeerAcceptedQuotesRequest {
}

message PeerAcceptedBuyQuote {
    // Quote counterparty peer.
    string peer = 1;

    // The unique identifier of the quote request.
    bytes id = 2;

    // scid is the short channel ID of the channel over which the payment for
    // the quote should be made.
    uint64 scid = 3;

    // asset_amount is the amount of the subject asset.
    uint64 asset_amount = 4;

    // ask_price is the price in millisats for the entire asset amount.
    uint64 ask_price = 5;

    // The unix timestamp in seconds after which the quote is no longer valid.
    uint64 expiry = 6;
}

message PeerAcceptedSellQuote {
    // Quote counterparty peer.
    string peer = 1;

    // The unique identifier of the quote request.
    bytes id = 2;

    // scid is the short channel ID of the channel over which the payment for
    // the quote should be made.
    uint64 scid = 3;

    // asset_amount is the amount of the subject asset.
    uint64 asset_amount = 4;

    // bid_price is the price in millisats for the entire asset amount.
    uint64 bid_price = 5;

    // The unix timestamp in seconds after which the quote is no longer valid.
    uint64 expiry = 6;
}

message QueryPeerAcceptedQuotesResponse {
    // buy_quotes is a list of asset buy quotes which were requested by our
    // node and have been accepted by our peers.
    repeated PeerAcceptedBuyQuote buy_quotes = 1;

    // sell_quotes is a list of asset sell quotes which were requested by our
    // node and have been accepted by our peers.
    repeated PeerAcceptedSellQuote sell_quotes = 2;
}

message SubscribeRfqEventNtfnsRequest {
}

message PeerAcceptedBuyQuoteEvent {
    // Unix timestamp in microseconds.
    uint64 timestamp = 1;

    // The asset buy quote that was accepted by out peer.
    PeerAcceptedBuyQuote peer_accepted_buy_quote = 2;
}

message PeerAcceptedSellQuoteEvent {
    // Unix timestamp in microseconds.
    uint64 timestamp = 1;

    // The asset sell quote that was accepted by out peer.
    PeerAcceptedSellQuote peer_accepted_sell_quote = 2;
}

message AcceptHtlcEvent {
    // Unix timestamp in microseconds.
    uint64 timestamp = 1;

    // scid is the short channel ID of the channel over which the payment for
    // the quote is made.
    uint64 scid = 2;
}

message RfqEvent {
    oneof event {
        // peer_accepted_buy_quote is an event that is emitted when a peer
        // accepted (incoming) asset buy quote message is received.
        PeerAcceptedBuyQuoteEvent peer_accepted_buy_quote = 1;

        // peer_accepted_sell_offer is an event that is emitted when a peer
        // accepted (incoming) asset sell quote message is received.
        PeerAcceptedSellQuoteEvent peer_accepted_sell_quote = 2;

        // accept_htlc is an event that is sent when a HTLC is accepted by the
        // RFQ service.
        AcceptHtlcEvent accept_htlc = 3;
    }
}
